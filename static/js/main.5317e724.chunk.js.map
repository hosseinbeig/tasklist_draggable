{"version":3,"sources":["reducers/todoReducer.js","reducers/index.js","actions/types.js","store.js","components/Badge.js","containers/TodosContainer.js","components/Lists.js","components/AddTodo.js","actions/todosAction.js","App.js","index.js"],"names":["initialState","cards","todo","loading","message","combineReducers","todoReducer","state","arguments","length","undefined","action","type","payload","Object","objectSpread","concat","toConsumableArray","status","todoID","progressID","doneId","elementId","map","card","id","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","apply","Badge","selected","props","react_default","a","createElement","Fragment","className","num","title","List","_this","this","todoNum","data","name","components_Badge","style","height","onDragOver","allowsDrop","onDrop","drop","list","key","draggable","onDragStart","event","dragStart","dragOver","onDragEnd","dragEnd","text","React","Component","AddTodo","_Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","target","value","onSubmit","preventDefault","onAdding","DbData","toToData","inherits","createClass","required","dataBase","TodosContainer","dataTransfer","effectAllowed","dataToTransfer","JSON","stringify","setData","deraggedData","getData","realData","parse","order","onChangeTarget","currentTarget","isBefore","parentNode","insertBefore","nextSibling","element1","element2","current","previousSibling","onReadDataFromJson","filter","inProgress","done","components_AddTodo","assign","components_Lists","connect","dispatch","actions","App","es","containers_TodosContainer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5317e724.chunk.js","sourcesContent":["import * as actionsTypes from '../actions/types';\r\n\r\nconst initialState = {\r\n  cards: [\r\n    {\r\n      todo: []\r\n    }\r\n  ],\r\n  loading: false,\r\n  message: ''\r\n};\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case actionsTypes.FETCH_TODOS_INIT:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n\r\n    case actionsTypes.FETCH_TODOS_FAILED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        cards: [],\r\n        message: 'Try agian  :( '\r\n      };\r\n\r\n    case actionsTypes.FETCH_TODOS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        cards: payload,\r\n        message: ''\r\n      };\r\n\r\n    case actionsTypes.ADD_TODOS:\r\n      return {\r\n        ...state,\r\n        cards: [...state.cards, payload]\r\n      };\r\n\r\n    case actionsTypes.CHANGE_TARGET:\r\n      const checkElementIdStatus = {\r\n        todoID: 0,\r\n        progressID: 1,\r\n        doneId: 2\r\n      };\r\n      let status = checkElementIdStatus[action.elementId] || 0;\r\n\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map(card =>\r\n          card.id === payload.id ? { ...card, status: status } : card\r\n        )\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport todoReducer from './todoReducer';\r\n\r\nexport default combineReducers({\r\n  todoReducer\r\n});\r\n","export const FETCH_TODOS_INIT = 'FETCH_TODOS_INIT';\r\nexport const FETCH_TODOS_FAILED = 'FETCH_TODOS_FAILED';\r\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\r\n\r\nexport const ADD_TODOS = 'ADD_TODOS';\r\nexport const CHANGE_TARGET = 'CHANGE_TARGET';\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\n\r\nfunction Badge(props) {\r\n  return (\r\n    <>\r\n      <span className='badge badge-light px-3 py-2'>\r\n        <strong>{props.num}</strong>\r\n        <br />\r\n        <span className='text-muted'>{props.title}</span>\r\n      </span>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Badge;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Lists from '../components/Lists';\r\nimport AddTodo from '../components/AddTodo';\r\nimport Badge from '../components/Badge';\r\nimport * as actions from '../actions/index';\r\n\r\nvar selected;\r\nexport class TodosContainer extends Component {\r\n  componentDidMount() {\r\n    this.props.onReadDataFromJson();\r\n  }\r\n\r\n  dragStart = (event, data) => {\r\n    event.dataTransfer.effectAllowed = 'move';\r\n    selected = event.target; // selected item\r\n    let dataToTransfer = JSON.stringify(data);\r\n    event.dataTransfer.setData('object', dataToTransfer);\r\n  };\r\n\r\n  allowsDrop(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  dragEnd = () => {\r\n    selected = null;\r\n  };\r\n\r\n  drop = event => {\r\n    event.preventDefault();\r\n    const deraggedData = event.dataTransfer.getData('object');\r\n    let realData = JSON.parse(deraggedData);\r\n    let text = realData.text;\r\n    let id = realData.id;\r\n    let status = realData.status;\r\n    let order = realData.order;\r\n    this.props.onChangeTarget(text, id, status, order, event.currentTarget.id);\r\n  };\r\n\r\n  dragOver = event => {\r\n    if (this.isBefore(selected, event.target))\r\n      event.target.parentNode.insertBefore(selected, event.target);\r\n    else if (selected.parentNode.id === event.target.parentNode.id)\r\n      event.target.parentNode.insertBefore(selected, event.target.nextSibling);\r\n  };\r\n\r\n  isBefore = (element1, element2) => {\r\n    let current;\r\n    if (element2.parentNode === element1.parentNode) {\r\n      for (\r\n        current = element1.previousSibling;\r\n        current;\r\n        current = current.previousSibling\r\n      ) {\r\n        if (current === element2) return true;\r\n      }\r\n    } else return false;\r\n  };\r\n\r\n  render() {\r\n    const { DbData } = this.props;\r\n\r\n    let toToData = DbData.filter(data => {\r\n      return data.status === 0;\r\n    });\r\n\r\n    let inProgress = DbData.filter(data => {\r\n      return data.status === 1;\r\n    });\r\n\r\n    let done = DbData.filter(data => {\r\n      return data.status === 2;\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <AddTodo toToData={toToData} DbData={DbData} {...this.props} />\r\n        <div className='d-flex justify-content-end'>\r\n          <Badge title='Tasks' num={DbData.length} />\r\n        </div>\r\n        <div className='card-deck mt-1'>\r\n          <Lists\r\n            name='To Do'\r\n            onChangeTarget={this.props.onChangeTarget}\r\n            id='todoID'\r\n            data={toToData}\r\n            allowsDrop={this.allowsDrop}\r\n            isBefore={this.isBefore}\r\n            dragOver={this.dragOver}\r\n            dragStart={this.dragStart}\r\n            dragEnd={this.dragEnd}\r\n            drop={this.drop}\r\n          />\r\n          <Lists\r\n            name='In Progress'\r\n            onChangeTarget={this.props.onChangeTarget}\r\n            id='progressID'\r\n            data={inProgress}\r\n            allowsDrop={this.allowsDrop}\r\n            isBefore={this.isBefore}\r\n            dragOver={this.dragOver}\r\n            dragStart={this.dragStart}\r\n            dragEnd={this.dragEnd}\r\n            drop={this.drop}\r\n          />\r\n          <Lists\r\n            name='Done'\r\n            onChangeTarget={this.props.onChangeTarget}\r\n            id='doneId'\r\n            data={done}\r\n            allowsDrop={this.allowsDrop}\r\n            isBefore={this.isBefore}\r\n            dragOver={this.dragOver}\r\n            dragStart={this.dragStart}\r\n            dragEnd={this.dragEnd}\r\n            drop={this.drop}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  DbData: state.todoReducer.cards\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onReadDataFromJson: () => dispatch(actions.fetchData()),\r\n  onAdding: (text, id, status, order) =>\r\n    dispatch(actions.add(text, id, status, order)),\r\n  onChangeTarget: (text, id, status, order, elementId) =>\r\n    dispatch(actions.changeTarget(text, id, status, order, elementId))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodosContainer);\r\n","import React from 'react';\r\nimport Badge from './Badge';\r\nimport './Lists.css';\r\n\r\nclass List extends React.Component {\r\n  render() {\r\n    let todoNum = 0;\r\n    let { data } = this.props;\r\n    if (data) {\r\n      todoNum = data.length;\r\n    }\r\n\r\n    return (\r\n      <div id={this.props.id} className='card'>\r\n        <div className='card-header d-flex justify-content-between align-items-center '>\r\n          <strong className='text-white'>{this.props.name}</strong>\r\n          <Badge title='Tasks' num={todoNum} />\r\n        </div>\r\n        <ul\r\n          style={{ height: '100%' }}\r\n          id={this.props.id}\r\n          onDragOver={this.props.allowsDrop}\r\n          onDrop={this.props.drop}\r\n        >\r\n          {data\r\n            ? data.map(list => {\r\n                return (\r\n                  <li\r\n                    key={list.id}\r\n                    id={list.id}\r\n                    draggable={true}\r\n                    onDragStart={event => this.props.dragStart(event, list)}\r\n                    onDragOver={this.props.dragOver}\r\n                    onDragEnd={this.props.dragEnd}\r\n                  >\r\n                    {list.text}\r\n                  </li>\r\n                );\r\n              })\r\n            : null}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAdding(\r\n      this.state.text,\r\n      this.props.DbData.length + 1,\r\n      0,\r\n      this.props.toToData.length + 1\r\n    );\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className='form-inline' onSubmit={this.onSubmit}>\r\n          <label>\r\n            <strong>Add Task</strong>\r\n          </label>\r\n          <input\r\n            type='text'\r\n            required\r\n            className='form-control mx-sm-3'\r\n            value={this.state.text}\r\n            onChange={this.onChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import * as actionTypes from './types';\r\n\r\nimport DBData from '../data/db.json';\r\n\r\nconst dataBase = DBData[0].cards;\r\n\r\nexport const fetchTodosInit = () => dispatch => {\r\n  dispatch({\r\n    type: actionTypes.FETCH_TODOS_INIT\r\n  });\r\n};\r\n\r\nexport const fetchTodosFailed = () => dispatch => {\r\n  dispatch({\r\n    type: actionTypes.FETCH_TODOS_FAILED\r\n  });\r\n};\r\n\r\nexport const fetchTodosSuccess = data => dispatch => {\r\n  dispatch({\r\n    type: actionTypes.FETCH_TODOS_SUCCESS,\r\n    payload: data\r\n  });\r\n};\r\n\r\nexport const fetchData = () => {\r\n  return dispatch => {\r\n    dispatch(fetchTodosInit());\r\n    dispatch(fetchTodosFailed());\r\n    dispatch(fetchTodosSuccess(dataBase));\r\n  };\r\n};\r\n\r\nexport const add = (text, id, status, order) => dispatch => {\r\n  let data = { text, id, status, order };\r\n\r\n  dispatch({\r\n    type: actionTypes.ADD_TODOS,\r\n    payload: data\r\n  });\r\n};\r\n\r\nexport const changeTarget = (\r\n  text,\r\n  id,\r\n  status,\r\n  order,\r\n  elementId\r\n) => dispatch => {\r\n  let data = { text, id, status, order };\r\n\r\n  dispatch({\r\n    type: actionTypes.CHANGE_TARGET,\r\n    payload: data,\r\n    elementId\r\n  });\r\n};\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport TodosContainer from './containers/TodosContainer';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <TodosContainer />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}